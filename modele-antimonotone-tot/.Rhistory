#Définir une fonction pour la simulation
sim = function(p, prob_rep = c(0.2, 0.4)){
#on fait varier p la proportion de la pop dans l'échantillon non-probabiliste
#on contrôle aussi les valeurs de p1 et p2
N=1000
n1=N*0.05
n2=N*p
B=100
est_eas = rep(NA,B)
est_R = rep(NA,B)
prob_Y = 0.5 #probabilité que la variable binaire = 1
pop_y = rbinom(N,1,prob_Y)
probs_R = (pop_y==0)*prob_rep[1] + (pop_y==1)*prob_rep[2]
for(i in 1:B){
samp_eas = sample(1:N, n1) #prob égales
samp_R = sample(1:N, n2, prob = probs_R)
est_eas[i] = mean(pop_y[samp_eas])
est_R[i] = mean(pop_y[samp_R])
}
#  mean((est_eas - mean(pop_y))^2)
#  mean((est_R - mean(pop_y))^2)
ratio  = mean((est_eas - mean(pop_y))^2) / mean((est_R - mean(pop_y))^2)
return(ratio)
}
ps = seq(0.1,0.9,length=100)
out = rep(NA,100)
for( i in 1:100 ){
out[i] = sim(ps[i], prob_rep = c(0.1, 0.8))
}
plot(ps,out, type = "b", pch = 16, las =1, xlab = "Proportion de la population dans l'échantillon non-probabiliste (p)", ylab = "Ratio", main = "Ratio de l'EQM de l'échantillon ÉAS vs l'échantillon non-probabiliste ")
abline(h=1)
#Définir une fonction pour la simulation
sim = function(p, prob_rep = c(0.2, 0.4)){
#on fait varier p la proportion de la pop dans l'échantillon non-probabiliste
#on contrôle aussi les valeurs de p1 et p2
N=1000
n1=N*0.4
n2=N*p
B=100
est_eas = rep(NA,B)
est_R = rep(NA,B)
prob_Y = 0.5 #probabilité que la variable binaire = 1
pop_y = rbinom(N,1,prob_Y)
probs_R = (pop_y==0)*prob_rep[1] + (pop_y==1)*prob_rep[2]
for(i in 1:B){
samp_eas = sample(1:N, n1) #prob égales
samp_R = sample(1:N, n2, prob = probs_R)
est_eas[i] = mean(pop_y[samp_eas])
est_R[i] = mean(pop_y[samp_R])
}
#  mean((est_eas - mean(pop_y))^2)
#  mean((est_R - mean(pop_y))^2)
ratio  = mean((est_eas - mean(pop_y))^2) / mean((est_R - mean(pop_y))^2)
return(ratio)
}
set.seed(1635)
#Définir une fonction pour la simulation
sim = function(p, prob_rep = c(0.2, 0.4)){
#on fait varier p la proportion de la pop dans l'échantillon non-probabiliste
#on contrôle aussi les valeurs de p1 et p2
N=1000
n1=N*0.4
n2=N*p
B=100
est_eas = rep(NA,B)
est_R = rep(NA,B)
prob_Y = 0.5 #probabilité que la variable binaire = 1
pop_y = rbinom(N,1,prob_Y)
probs_R = (pop_y==0)*prob_rep[1] + (pop_y==1)*prob_rep[2]
for(i in 1:B){
samp_eas = sample(1:N, n1) #prob égales
samp_R = sample(1:N, n2, prob = probs_R)
est_eas[i] = mean(pop_y[samp_eas])
est_R[i] = mean(pop_y[samp_R])
}
#  mean((est_eas - mean(pop_y))^2)
#  mean((est_R - mean(pop_y))^2)
ratio  = mean((est_eas - mean(pop_y))^2) / mean((est_R - mean(pop_y))^2)
return(ratio)
}
ps = seq(0.1,0.9,length=100)
out = rep(NA,100)
for( i in 1:100 ){
out[i] = sim(ps[i], prob_rep = c(0.1, 0.8))
}
plot(ps,out, type = "b", pch = 16, las =1, xlab = "Proportion de la population dans l'échantillon non-probabiliste (p)", ylab = "Ratio", main = "Ratio de l'EQM de l'échantillon ÉAS vs l'échantillon non-probabiliste ")
abline(h=1)
install.packages("ddi")
library("ddi")
help(ddc)
ddc
help(ddc)
help(ddc)
# 1.
help(g2016)
data("g2016")
g2016
# 2.
data("g2016")
d <- g2016
d[d$state = "Alabama"]}
d[d$state == "Alabama"]}
d[d$state == "Alabama"]
d[d$state == "Alabama"]
d
d
d[d$st == "Al"]
d[d$st == "AL"]
d$st == "AL"
d[, d$st == "AL"]
d[d$st == "AL", ]
g2016
d[d$st == "AL", ]
state_alabama <- d[d$st == "AL", ]
d_alabama <- d[d$st == "AL", ]
d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters)
sqrt(d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters))
sqrt(d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters))
p_alabama <- d_alabama$votes_djt / d_alabama$tot_votes
p_alabama
d_alabama$pct_djt_voters
d_alabama
d_alabama
?ddc
# 5.
with(g2016, ddc(mu = pct_djt_voters, muhat = cces_pct_djt_vv, N = tot_votes, n = cces_n_vv))
with(data.frame(a = c(1,2,3)), function(x) print(x))
with(data.frame(a = c(1,2,3)), print(a))
# 5.
ddc_values <- with(g2016, ddc(mu = pct_djt_voters, muhat = cces_pct_djt_vv, N = tot_votes, n = cces_n_vv))
rbind(ddc_v = ddc_values, d)
cbind(ddc_v = ddc_values, d)
d_all <- cbind(ddc_v = ddc_values, d)
# 6.
d_all[c(1, 2, 3, 4, 5), ]
p_alabama <- d_alabama$votes_djt / d_alabama$tot_votes
sqrt(d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters))
d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters)
??g2016
?g2016
d_alabama
sqrt(d_alabama$cces_pct_djt_vv * (1 - d_alabama$cces_pct_djt_vv))
sqrt(d_alabama$cces_pct_djt_vv * (1 - d_alabama$cces_pct_djtrund_vv))
sqrt(d_alabama$cces_pct_djtrund_vv * (1 - d_alabama$cces_pct_djtrund_vv))
sqrt(d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters))
sqrt(d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters))
d_alabama
# 2.
data("g2016")
d <- g2016
d_alabama <- d[d$st == "AL", ]
sqrt(d_alabama$pct_djt_voters * (1 - d_alabama$pct_djt_voters))
setwd("~/Documents/universite/Maitrise_en_actuariat/H25/ACT-7119/Chapitre1/Codes_depot/act-7119-travail-1/modele-comonotonicite-tot")
options(scipen = 1000)
source("echantillonner_model_3.R")
source("calculer_FS.R")
source("../utilitaires/approximer_kmax.R")
# Test - model 3 de [Cossette et al., 2019]
ech_l <- echantillonner_modele_3(1000, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech[1,]
S <- apply(ech[, -1], 1, sum)
mean(S)
var(S)
10 * (1 / 0.001)
10 * (1 / (0.001^2)) + ((1 / 0.001)^2) * 10
# Test 2
ktest <- approximer_kmax(function(x) ppois(x, 4), 0.0001)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 4), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 4), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000, function(x) ppois(x, 4), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(1000000, function(x) ppois(x, 4), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 4),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 4)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 4),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 4)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 4), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(1000000, function(x) ppois(x, 4), function(x) qexp(x, 0.001), ktest)
calculer_ES_crm_comonotonicite <- function(x, pDistN, qDistX, kmax)
{
ES <- 0
for (i in seq(kmax))
{
ES <- ES + integrate(function(y) i * qDistX(y), pDistN(i - 1), pDistN(i))$value
}
ES
}
source("echantillonner_model_3.R")
source("calculer_FS.R")
source("calculer_ES.R")
source("calculer_VarS.R")
source("calculer_mesures_risque_S.R")
source("../utilitaires/approximer_kmax.R")
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(1000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
# Validation de FS
ktest <- approximer_kmax(function(x) ppois(x, 10), 0.0001)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
# Test - model 3 de [Cossette et al., 2019]
ech_l <- echantillonner_modele_3(1000, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech[1,]
S <- apply(ech[, -1], 1, sum)
mean(S)
var(S)
10 * (1 / 0.001)
10 * (1 / (0.001^2)) + ((1 / 0.001)^2) * 10
# Validation de FS
ktest <- approximer_kmax(function(x) ppois(x, 10), 0.0001)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
c(empirique = mean(S), theorique = calculer_ES_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
# Test - model 3 de [Cossette et al., 2019]
ech_l <- echantillonner_modele_3(1000000, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
# Test - model 3 de [Cossette et al., 2019]
n <- 100000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech_l$max_N_i
ech_l$realisations
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
echantillonner_modele_3 <- function(n, qDistN, qDistX, rseed = 201)
{
realisations <- list()
realisation_i <- vector(mode = "numeric")
U_i <- 0
max_N_i <- 0
for (i in seq(n))
{
U_i <- runif(1)
realisation_i[1] <- qDistN(U_i)
if (realisation_i[1] != 0)
{
realisation_i <- c(realisation_i[1], rep(qDistX(U_i), realisation_i[1]))
}
if (realisation_i[1] > max_N_i)
{
max_N_i <- realisation_i[1]
}
realisations[[i]] <- realisation_i
}
list(realisations = realisations,
max_N_i = max_N_i)
}
structurer_echantillon <- function(ech_list, max_N_i)
{
n <- length(ech_list)
realisations <- matrix(rep(0, n * (max_N_i + 1)), nrow = n, ncol = max_N_i + 1)
for (i in seq(n))
{
realisations[i, 1:(ech_list[[i]][1] + 1)] <- ech_list[[i]]
}
realisations
}
options(scipen = 1000)
source("echantillonner_model_3.R")
source("calculer_FS.R")
source("calculer_ES.R")
source("calculer_VarS.R")
source("calculer_mesures_risque_S.R")
source("../utilitaires/approximer_kmax.R")
# Test - model 3 de [Cossette et al., 2019]
n <- 100000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
S <- apply(ech[, -1], 1, sum)
mean(S)
var(S)
10 * (1 / 0.001)
10 * (1 / (0.001^2)) + ((1 / 0.001)^2) * 10
# Validation de FS
ktest <- approximer_kmax(function(x) ppois(x, 10), 0.0001)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
# Test - model 3 de [Cossette et al., 2019]
n <- 10000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech[1,]
S <- apply(ech[, -1], 1, sum)
mean(S)
var(S)
10 * (1 / 0.001)
10 * (1 / (0.001^2)) + ((1 / 0.001)^2) * 10
# Validation de FS
ktest <- approximer_kmax(function(x) ppois(x, 10), 0.0001)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
c(empirique = mean(S), theorique = calculer_ES_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
c(var(S))
c(empirique = var(S), theorique = calculer_VarS_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
# Test - model 3 de [Cossette et al., 2019]
n <- 50000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech_l
# Test - model 3 de [Cossette et al., 2019]
n <- 50000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 0.2), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
structurer_echantillon <- function(ech_list, max_N_i)
{
n <- length(ech_list)
realisations <- matrix(rep(0, n * (max_N_i + 1)), nrow = n, ncol = max_N_i + 1)
for (i in seq(n))
{
print(ech_list[[i]])
realisations[i, 1:(ech_list[[i]][1] + 1)] <- ech_list[[i]]
}
realisations
}
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
echantillonner_modele_3 <- function(n, qDistN, qDistX, rseed = 201)
{
realisations <- list()
realisation_i <- vector(mode = "numeric")
U_i <- 0
max_N_i <- 0
for (i in seq(n))
{
U_i <- runif(1)
realisation_i <- vector(mode = "numeric")
realisation_i[1] <- qDistN(U_i)
if (realisation_i[1] != 0)
{
realisation_i <- c(realisation_i[1], rep(qDistX(U_i), realisation_i[1]))
}
if (realisation_i[1] > max_N_i)
{
max_N_i <- realisation_i[1]
}
realisations[[i]] <- realisation_i
}
list(realisations = realisations,
max_N_i = max_N_i)
}
structurer_echantillon <- function(ech_list, max_N_i)
{
n <- length(ech_list)
realisations <- matrix(rep(0, n * (max_N_i + 1)), nrow = n, ncol = max_N_i + 1)
for (i in seq(n))
{
print(ech_list[[i]])
realisations[i, 1:(ech_list[[i]][1] + 1)] <- ech_list[[i]]
}
realisations
}
# Test - model 3 de [Cossette et al., 2019]
n <- 500000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 0.2), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
# Test - model 3 de [Cossette et al., 2019]
n <- 500000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 0.2), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
structurer_echantillon <- function(ech_list, max_N_i)
{
n <- length(ech_list)
realisations <- matrix(rep(0, n * (max_N_i + 1)), nrow = n, ncol = max_N_i + 1)
for (i in seq(n))
{
realisations[i, 1:(ech_list[[i]][1] + 1)] <- ech_list[[i]]
}
realisations
}
# Test - model 3 de [Cossette et al., 2019]
n <- 500000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 0.2), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech[1,]
S <- apply(ech[, -1], 1, sum)
mean(S)
var(S)
10 * (1 / 0.001)
10 * (1 / (0.001^2)) + ((1 / 0.001)^2) * 10
# Validation de FS
ktest <- approximer_kmax(function(x) ppois(x, 10), 0.0001)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
c(empirique = mean(S), theorique = calculer_ES_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
c(empirique = var(S), theorique = calculer_VarS_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
# Test - model 3 de [Cossette et al., 2019]
n <- 500000
ech_l <- echantillonner_modele_3(n, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
ech <- structurer_echantillon(ech_l$realisations, ech_l$max_N_i)
ech[1,]
S <- apply(ech[, -1], 1, sum)
mean(S)
var(S)
10 * (1 / 0.001)
10 * (1 / (0.001^2)) + ((1 / 0.001)^2) * 10
# Validation de FS
ktest <- approximer_kmax(function(x) ppois(x, 10), 0.0001)
calculer_FS_crm_comonotonicite(0,
function(x) ppois(x, 10),
function(x) qexp(x, 0.001),
ktest) == ppois(0, 10)
calculer_FS_crm_comonotonicite(1000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
calculer_FS_crm_comonotonicite(100000000, function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest)
c(empirique = mean(S), theorique = calculer_ES_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
c(empirique = var(S), theorique = calculer_VarS_crm_comonotonicite(function(x) ppois(x, 10), function(x) qexp(x, 0.001), ktest))
calculer_VaRS_crm_comonotonicite(0.99, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
calculer_TVaRS_crm_comonotonicite(0.99, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
calculer_TVaRS_crm_comonotonicite <- function(k, qDistN, qDistX)
{
(1 / (1 - k)) *
integrate(function(x) calculer_VaRS_crm_comonotonicite(x,
qDistN,
qDistX),
k,
1)$value
}
calculer_TVaRS_crm_comonotonicite(0.99, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
calculer_VaRS_crm_comonotonicite(0.99, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
calculer_TVaRS_crm_comonotonicite(0.99, function(x) qpois(x, 10), function(x) qexp(x, 0.001))
calculer_frep_XcondN_crm_comonotonicite <- function(x, k, pDistN, pDistX)
{
(pDistX(x) < pDistN(k - 1)) * 0 +
( (pDistN(k - 1) <= pDistX(x)) &
(pDistX(x) <= pDistN(k)) ) *
( (pDistX(x) - pDistN(k - 1)) / (pDistN(k) - pDistN(k - 1)) ) +
(pDistN(k) < pDistXx) * 1
}
calculer_frep_XcondN_crm_comonotonicite <- function(x, k, pDistN, pDistX)
{
(pDistX(x) < pDistN(k - 1)) * 0 +
( (pDistN(k - 1) <= pDistX(x)) &
(pDistX(x) <= pDistN(k)) ) *
( (pDistX(x) - pDistN(k - 1)) / (pDistN(k) - pDistN(k - 1)) ) +
(pDistN(k) < pDistXx) * 1
}
source("calculer_frep_XcondN.R")
calculer_frep_XcondN_crm_comonotonicite(1000,
1:10,
function(x) qpois(x, 10),
function(x) qexp(x, 0.001))
calculer_frep_XcondN_crm_comonotonicite <- function(x, k, pDistN, pDistX)
{
(pDistX(x) < pDistN(k - 1)) * 0 +
( (pDistN(k - 1) <= pDistX(x)) &
(pDistX(x) <= pDistN(k)) ) *
( (pDistX(x) - pDistN(k - 1)) / (pDistN(k) - pDistN(k - 1)) ) +
(pDistN(k) < pDistX(x)) * 1
}
calculer_frep_XcondN_crm_comonotonicite <- function(x, k, pDistN, pDistX)
{
(pDistX(x) < pDistN(k - 1)) * 0 +
( (pDistN(k - 1) <= pDistX(x)) &
(pDistX(x) <= pDistN(k)) ) *
( (pDistX(x) - pDistN(k - 1)) / (pDistN(k) - pDistN(k - 1)) ) +
(pDistN(k) < pDistX(x)) * 1
}
calculer_frep_XcondN_crm_comonotonicite(1000,
1:10,
function(x) qpois(x, 10),
function(x) qexp(x, 0.001))
warnigns()
warnings()
calculer_frep_XcondN_crm_comonotonicite(1000,
1:10,
function(x) ppois(x, 10),
function(x) pexp(x, 0.001))
calculer_frep_XcondN_crm_comonotonicite(100,
1:10,
function(x) ppois(x, 10),
function(x) pexp(x, 0.001))
calculer_frep_XcondN_crm_comonotonicite(500,
8:12,
function(x) ppois(x, 10),
function(x) pexp(x, 0.001))
calculer_frep_XcondN_crm_comonotonicite(seq(100, 500, by = 100),
8,
function(x) ppois(x, 10),
function(x) pexp(x, 0.001))
plot(1:20, calculer_frep_XcondN_crm_comonotonicite(500,
1:20,
function(x) ppois(x, 10),
function(x) pexp(x, 0.001)))
plot(1:20,
calculer_frep_XcondN_crm_comonotonicite(500,
1:20,
function(x) ppois(x, 10),
function(x) pexp(x, 0.001)))
